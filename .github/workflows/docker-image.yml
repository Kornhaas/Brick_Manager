name: 🐳 Docker Build and Deploy

on:
  push:
    branches: [ "main", "develop" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: kornhaas/lego_manager

jobs:
  # Test job - runs before building Docker image
  test:
    runs-on: ubuntu-latest
    name: 🧪 Run Tests
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: 📦 Install Poetry
      uses: abatilo/actions-poetry@v2
      with:
        poetry-version: latest

    - name: 🔧 Configure Poetry
      run: |
        poetry config virtualenvs.create false

    - name: 📚 Install dependencies
      run: |
        poetry install --only main,dev

    - name: 🧹 Lint with pylint
      run: |
        poetry run pylint brick_manager/ --exit-zero

    - name: 🧪 Run tests
      run: |
        poetry run pytest tests/ --verbose

  # Build and push Docker image
  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    name: 🔨 Build & Push Docker Image
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

    - name: 🧪 Test Docker image
      if: github.event_name != 'pull_request'
      run: |
        # Test that the image can start successfully
        docker run --rm -d --name test-container \
          -e REBRICKABLE_TOKEN=test-token \
          -e SECRET_KEY=test-secret \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        
        # Wait for container to start
        sleep 30
        
        # Test health endpoint
        docker exec test-container curl -f http://localhost:5000/health || exit 1
        
        # Clean up
        docker stop test-container

    - name: 📊 Image summary
      if: github.event_name != 'pull_request'
      run: |
        echo "## 🐳 Docker Image Built Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Quick Start" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "docker run -p 5000:5000 -v ./data:/app/data ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    name: 🔒 Security Scan
    if: github.event_name != 'pull_request'
    
    steps:
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to staging/production (optional)
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    name: 🚀 Deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy notification
      run: |
        echo "## 🎉 Deployment Ready!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The Docker image has been built and is ready for deployment." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Manual Deployment Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Pull the latest image on your server" >> $GITHUB_STEP_SUMMARY
        echo "2. Update your docker-compose.yml if needed" >> $GITHUB_STEP_SUMMARY
        echo "3. Run \`docker compose pull && docker compose up -d\`" >> $GITHUB_STEP_SUMMARY

    # Uncomment and configure the following for automatic deployment
    # - name: 🚀 Deploy to production server
    #   uses: appleboy/ssh-action@v1.0.0
    #   with:
    #     host: ${{ secrets.DEPLOY_HOST }}
    #     username: ${{ secrets.DEPLOY_USER }}
    #     key: ${{ secrets.DEPLOY_SSH_KEY }}
    #     script: |
    #       cd /path/to/your/app
    #       docker compose pull
    #       docker compose up -d