name: 🧹 Code Quality (Pylint)

# This workflow runs on all pushes to provide continuous code quality feedback
# It's separate from the Docker workflow to provide faster feedback on code quality

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'poetry.lock'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'poetry.lock'

jobs:
  lint:
    runs-on: ubuntu-latest
    name: 🔍 Lint Python Code
    
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Install Poetry
      uses: abatilo/actions-poetry@v2
      with:
        poetry-version: latest
        
    - name: 🔧 Configure Poetry
      run: |
        poetry config virtualenvs.create false
        
    - name: 📚 Install dependencies
      run: |
        poetry install --only main,dev --no-root
        
    - name: 🧹 Run Pylint
      run: |
        echo "## 🧹 Pylint Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Run pylint and capture output
        if poetry run pylint brick_manager/ --output-format=text --reports=yes > pylint_output.txt 2>&1; then
          echo "✅ **No linting issues found!**" >> $GITHUB_STEP_SUMMARY
          PYLINT_SCORE=$(grep "Your code has been rated" pylint_output.txt | sed 's/.*rated at \([0-9.]*\).*/\1/')
          echo "**Score:** $PYLINT_SCORE/10" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Linting issues found:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat pylint_output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Don't fail the build for linting issues, just warn
          echo "::warning::Pylint found code quality issues. Check the summary for details."
        fi
        
    - name: 📤 Upload Pylint report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pylint-report-py${{ matrix.python-version }}
        path: pylint_output.txt
        retention-days: 30
