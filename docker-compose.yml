version: '3.8'

services:
  bricks-manager:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bricks-manager-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      # Mount persistent data directories outside the container
      - ./data/instance:/app/data/instance       # Database storage
      - ./data/uploads:/app/data/uploads         # File uploads
      - ./data/output:/app/data/output           # Generated outputs (labels, etc.)
      - ./data/cache:/app/data/cache             # Application cache
      - ./data/logs:/app/data/logs               # Application logs
    environment:
      - FLASK_APP=brick_manager/app.py
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - PYTHONPATH=/app
      - REBRICKABLE_TOKEN=${REBRICKABLE_TOKEN:-your-rebrickable-token-here}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      # Database configuration pointing to mounted volume
      - SQLALCHEMY_DATABASE_URI=sqlite:///data/instance/brick_manager.db
    networks:
      - bricks-manager-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Optional: Add a reverse proxy for production use
  nginx:
    image: nginx:alpine
    container_name: bricks-manager-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - bricks-manager
    networks:
      - bricks-manager-network
    profiles:
      - production  # Only start with --profile production

networks:
  bricks-manager-network:
    driver: bridge

volumes:
  # Named volumes for better Docker management (optional)
  bricks_data:
    driver: local
